name: Deploy to K3s

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install server dependencies
        working-directory: server
        run: bun install

      - name: Install client dependencies
        working-directory: client
        run: bun install

      - name: Build client
        working-directory: client
        run: bunx --bun vite build

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Configure kubectl
        run: |
          export KUBE_HOST="${{ secrets.KUBE_HOST }}"
          export KUBE_CERTIFICATE="${{ secrets.KUBE_CERTIFICATE }}"
          export KUBE_TOKEN="${{ secrets.KUBE_TOKEN }}"
          mkdir -p $HOME/.kube
          echo "$KUBE_CERTIFICATE" | base64 -d > $HOME/.kube/certificate
          kubectl config set-cluster default --server=https://$KUBE_HOST --certificate-authority=$HOME/.kube/certificate > /dev/null
          kubectl config set-credentials cluster-admin --token="${KUBE_TOKEN}" > /dev/null
          kubectl config set-context default --cluster=default --user=cluster-admin > /dev/null
          kubectl config use-context default > /dev/null

      - name: Check connection
        run: kubectl get nodes

      - name: Create namespace if not exists
        run: |
          kubectl create namespace learn-platform --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy PostgreSQL
        run: |
          # Delete the existing deployment first
          kubectl delete deployment postgresql-postgresql -n learn-platform --ignore-not-found=true
          
          helm upgrade --install postgresql ./learn-platform \
            --namespace learn-platform \
            --wait --timeout 5m

      - name: Create server config
        run: |
          # Create a ConfigMap for environment variables
          kubectl create configmap learn-platform-config \
            --from-literal=NODE_ENV=production \
            --namespace learn-platform \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy server code
        run: |
          # Create a tar of the server directory
          tar -czf server.tar.gz -C server .
          
          # Create a PVC for server code
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: server-code
            namespace: learn-platform
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 1Gi
          EOF
          
          # Create an init container job to copy code
          cat <<EOF | kubectl apply -f -
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: copy-server-code
            namespace: learn-platform
          spec:
            template:
              spec:
                containers:
                - name: copy-code
                  image: busybox
                  command:
                  - /bin/sh
                  - -c
                  - |
                    cd /server-code
                    tar xzf /tmp/server.tar.gz
                  volumeMounts:
                  - name: server-code
                    mountPath: /server-code
                  - name: server-tar
                    mountPath: /tmp/server.tar.gz
                    subPath: server.tar.gz
                volumes:
                - name: server-code
                  persistentVolumeClaim:
                    claimName: server-code
                - name: server-tar
                  configMap:
                    name: server-tar
                restartPolicy: Never
          EOF
          
          # Create ConfigMap with the tar file
          kubectl create configmap server-tar \
            --from-file=server.tar.gz \
            --namespace learn-platform \
            --dry-run=client -o yaml | kubectl apply -f -
          
          # Deploy the application
          helm upgrade --install learn-platform ./learn-platform \
            --namespace learn-platform \
            --set server.volumeClaimName=server-code \
            --wait --timeout 5m

      - name: Verify deployment
        run: |
          kubectl get pods -n learn-platform
          kubectl get services -n learn-platform
          kubectl get pvc -n learn-platform
