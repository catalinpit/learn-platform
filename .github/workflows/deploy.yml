name: Deploy to K3s

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install server dependencies
        working-directory: server
        run: bun install

      - name: Install client dependencies
        working-directory: client
        run: bun install

      - name: Build client
        working-directory: client
        run: bunx --bun vite build

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Configure kubectl
        run: |
          export KUBE_HOST="${{ secrets.KUBE_HOST }}"
          export KUBE_CERTIFICATE="${{ secrets.KUBE_CERTIFICATE }}"
          export KUBE_TOKEN="${{ secrets.KUBE_TOKEN }}"
          mkdir -p $HOME/.kube
          echo "$KUBE_CERTIFICATE" | base64 -d > $HOME/.kube/certificate
          kubectl config set-cluster default --server=https://$KUBE_HOST --certificate-authority=$HOME/.kube/certificate > /dev/null
          kubectl config set-credentials cluster-admin --token="${KUBE_TOKEN}" > /dev/null
          kubectl config set-context default --cluster=default --user=cluster-admin > /dev/null
          kubectl config use-context default > /dev/null

      - name: Check connection
        run: kubectl get nodes

      - name: Create namespace if not exists
        run: |
          kubectl create namespace learn-platform --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy PostgreSQL
        run: |
          helm upgrade --install postgresql ./learn-platform \
            --namespace learn-platform \
            --wait --timeout 5m

      - name: Deploy applications
        run: |
          # Copy built client files to server's public directory
          mkdir -p server/public
          cp -r client/dist/* server/public/
          
          # Deploy server and client
          kubectl create configmap learn-platform-server \
            --from-file=server \
            --namespace learn-platform \
            --dry-run=client -o yaml | kubectl apply -f -
            
          helm upgrade --install learn-platform ./learn-platform \
            --namespace learn-platform \
            --set server.configMap=learn-platform-server \
            --wait --timeout 5m

      - name: Verify deployment
        run: |
          kubectl get pods -n learn-platform
          kubectl get services -n learn-platform
          kubectl get pvc -n learn-platform
