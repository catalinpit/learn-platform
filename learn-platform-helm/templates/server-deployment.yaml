apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-server
  namespace: {{ .Release.Namespace }}
  labels:
    app: server
    instance: {{ .Release.Name }}
spec:
  replicas: {{ .Values.app.replicas }}
  selector:
    matchLabels:
      app: server
      instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: server
        instance: {{ .Release.Name }}
    spec:
      initContainers:
        - name: wait-for-db
          image: "postgres:15"
          command: ['sh', '-c', '
            echo "Waiting for secret and database to be ready..."
            for i in $(seq 1 120); do
              echo "Attempt $i: Checking if secret exists..."
              if kubectl get secret {{ .Values.postgresql.cluster.name }}-app -n {{ .Release.Namespace }} >/dev/null 2>&1; then
                echo "Secret found. Checking PostgreSQL readiness..."
                if pg_isready -h {{ .Values.postgresql.cluster.name }}-rw -U {{ .Values.postgresql.cluster.bootstrap.initdb.owner }} -d {{ .Values.postgresql.cluster.bootstrap.initdb.database }}; then
                  echo "PostgreSQL is ready!"
                  exit 0
                else
                  echo "pg_isready failed with code $?. Retrying..."
                fi
              else
                echo "Secret {{ .Values.postgresql.cluster.name }}-app not found yet. Retrying..."
              fi
              sleep 5
            done
            echo "Failed: Secret or PostgreSQL not ready after 10 minutes"
            exit 1
          ']
          env:
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgresql.cluster.name }}-app
                  key: password
          volumeMounts:
            - name: db-secrets
              mountPath: /secrets
              readOnly: true
        - name: init-permissions
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          command: ["sh", "-c"]
          args:
            - |
              echo "Setting up Prisma directories..."
              mkdir -p /usr/src/app/node_modules/.prisma
              mkdir -p /usr/src/app/prisma/generated
              chmod -R 777 /usr/src/app/node_modules/.prisma
              chmod -R 777 /usr/src/app/prisma/generated
              echo "Directory setup complete"
          volumeMounts:
            - name: prisma-data
              mountPath: /usr/src/app/node_modules/.prisma
            - name: prisma-generated
              mountPath: /usr/src/app/prisma/generated
        - name: run-migrations
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["sh", "-c"]
          args:
            - |
              echo "Starting database migrations..."
              cd /usr/src/app/server

              # Ensure prisma directories exist and are writable
              mkdir -p /usr/src/app/node_modules/.prisma /usr/src/app/prisma/generated
              chmod -R 777 /usr/src/app/node_modules/.prisma /usr/src/app/prisma/generated

              # Generate Prisma client
              echo "Generating Prisma client..."
              bunx prisma generate

              # Run migrations
              echo "Running database migrations..."
              export DATABASE_URL="postgresql://$(cat /secrets/username):$(cat /secrets/password)@{{ .Values.postgresql.cluster.name }}-rw.{{ .Release.Namespace }}.svc.cluster.local:5432/{{ .Values.postgresql.cluster.bootstrap.initdb.database }}"
              echo "Using connection string: $DATABASE_URL"
              bunx prisma migrate deploy

              echo "Migrations completed successfully"
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
          envFrom:
            - secretRef:
                name: {{ .Values.server.existingSecret }}
          volumeMounts:
            - name: prisma-data
              mountPath: /usr/src/app/node_modules/.prisma
            - name: prisma-generated
              mountPath: /usr/src/app/prisma/generated
            - name: db-secrets
              mountPath: /secrets
              readOnly: true
      containers:
        - name: server
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["/bin/sh", "-c"]
          args:
            - |
              # Construct the DATABASE_URL with the correct database name
              export DATABASE_URL="postgresql://$(cat /secrets/username):$(cat /secrets/password)@{{ .Values.postgresql.cluster.name }}-rw.{{ .Release.Namespace }}.svc.cluster.local:5432/{{ .Values.postgresql.cluster.bootstrap.initdb.database }}"
              
              # Start the application
              cd /usr/src/app/server && bun start
          ports:
            - name: http
              containerPort: {{ .Values.server.port }}
              protocol: TCP
          envFrom:
            - secretRef:
                name: {{ .Values.server.existingSecret }}
          readinessProbe:
            httpGet:
              path: /api/health
              port: http
            initialDelaySeconds: 10
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /api/health
              port: http
            initialDelaySeconds: 20
            periodSeconds: 10
          resources:
            {{- toYaml .Values.server.resources | nindent 12 }}
          volumeMounts:
            - name: prisma-data
              mountPath: /usr/src/app/node_modules/.prisma
            - name: prisma-generated
              mountPath: /usr/src/app/prisma/generated
            - name: db-secrets
              mountPath: /secrets
              readOnly: true
      volumes:
        - name: prisma-data
          emptyDir: {}
        - name: prisma-generated
          emptyDir: {}
        - name: db-secrets
          secret:
            secretName: {{ .Values.postgresql.cluster.name }}-app
