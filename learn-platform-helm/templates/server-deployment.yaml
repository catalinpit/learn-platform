apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-server
  labels:
    app: server
    instance: {{ .Release.Name }}
spec:
  replicas: {{ .Values.app.replicas }}
  selector:
    matchLabels:
      app: server
      instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: server
        instance: {{ .Release.Name }}
    spec:
      initContainers:
        - name: wait-for-db
          image: "postgres:15"
          command: ['sh', '-c', 'until pg_isready -h {{ .Values.postgresql.cluster.name }}-rw.{{ .Values.postgresql.cluster.namespace }}.svc.cluster.local -p 5432; do echo "Waiting for CloudNativePG to be ready..."; sleep 2; done; echo "PostgreSQL is ready!";']
        - name: init-permissions
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          command: ["sh", "-c"]
          args:
            - |
              echo "Checking directory structure..."
              ls -la /usr/src/app || echo "Main app directory not found"
              
              # Create directories with proper error handling
              echo "Creating Prisma directories..."
              mkdir -p /usr/src/app/node_modules/.prisma || echo "Failed to create .prisma directory"
              mkdir -p /usr/src/app/prisma/generated || echo "Failed to create prisma/generated directory"
              
              # Set permissions with proper error handling
              echo "Setting permissions..."
              chmod -R 777 /usr/src/app/node_modules/.prisma || echo "Failed to set permissions on .prisma directory"
              chmod -R 777 /usr/src/app/prisma/generated || echo "Failed to set permissions on prisma/generated directory"
              
              echo "Directory setup complete"
          volumeMounts:
            - name: prisma-data
              mountPath: /usr/src/app/node_modules/.prisma
            - name: prisma-generated
              mountPath: /usr/src/app/prisma/generated
        - name: run-migrations
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["sh", "-c"]
          args:
            - |
              echo "Starting database migrations..."
              cd /usr/src/app
              
              # Check if we're in the right directory
              echo "Current directory: $(pwd)"
              ls -la
              
              # Generate Prisma client
              echo "Generating Prisma client..."
              bunx prisma generate || { echo "Failed to generate Prisma client"; exit 1; }
              
              # Run migrations
              echo "Running database migrations..."
              bunx prisma migrate deploy || { echo "Failed to run migrations"; exit 1; }
              
              echo "Migrations completed successfully"
          # Run as the bun user to match the main container
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
          envFrom:
            - secretRef:
                name: {{ .Values.server.existingSecret }}
          # Add volume mounts to ensure directories are writable
          volumeMounts:
            - name: prisma-data
              mountPath: /usr/src/app/node_modules/.prisma
            - name: prisma-generated
              mountPath: /usr/src/app/prisma/generated
      containers:
        - name: server
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.server.port }}
              protocol: TCP
          envFrom:
            - secretRef:
                name: {{ .Values.server.existingSecret }}
          readinessProbe:
            httpGet:
              path: /api/health
              port: http
            initialDelaySeconds: 10
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /api/health
              port: http
            initialDelaySeconds: 20
            periodSeconds: 10
          resources:
            {{- toYaml .Values.server.resources | nindent 12 }}
          # Add volume mounts to the main container as well
          volumeMounts:
            - name: prisma-data
              mountPath: /usr/src/app/node_modules/.prisma
            - name: prisma-generated
              mountPath: /usr/src/app/prisma/generated
      # Add volumes for Prisma data
      volumes:
        - name: prisma-data
          emptyDir: {}
        - name: prisma-generated
          emptyDir: {}
