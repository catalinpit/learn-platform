// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  CREATOR
  STUDENT
}

model User {
  id              String    @id @default(uuid())
  email           String    @unique
  name            String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  ownedCourses    Course[]  @relation("CourseOwner")
  enrolledCourses Course[]  @relation("CourseEnrollments")
  emailVerified   Boolean
  image           String?
  sessions        Session[]
  accounts        Account[]
  roles           Role[]    @default([STUDENT])

  @@map("user")
}

model Course {
  id          String   @id @default(uuid())
  title       String
  description String
  tags        String[]
  content     String
  videoUrls   String[]
  coverImage  String?
  price       Float
  isPublished Boolean
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  owner    User   @relation("CourseOwner", fields: [ownerId], references: [id])
  ownerId  String
  students User[] @relation("CourseEnrollments")

  @@index([ownerId])
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
